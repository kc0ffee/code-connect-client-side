/* tslint:disable */
/* eslint-disable */
/**
 * Code Connect API
 * Code Connectで利用するAPIの定義 # Feature - theme   - テーマをサーバーから取得するAPI - code   - ユーザーが作成したコードをサーバーに送信する機能  More Info =>  Notion 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CodeResponse,
  PostBody,
  Score,
} from '../models';
import {
    CodeResponseFromJSON,
    CodeResponseToJSON,
    PostBodyFromJSON,
    PostBodyToJSON,
    ScoreFromJSON,
    ScoreToJSON,
} from '../models';

export interface ApiCodePostRequest {
    postBody: PostBody;
}

export interface ApiResultGetRequest {
    id?: number;
}

/**
 * 
 */
export class CodeApi extends runtime.BaseAPI {

    /**
     * ユーザーが作成したコードをサーバーに送信するためのAPI
     */
    async apiCodePostRaw(requestParameters: ApiCodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CodeResponse>> {
        if (requestParameters.postBody === null || requestParameters.postBody === undefined) {
            throw new runtime.RequiredError('postBody','Required parameter requestParameters.postBody was null or undefined when calling apiCodePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBodyToJSON(requestParameters.postBody),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CodeResponseFromJSON(jsonValue));
    }

    /**
     * ユーザーが作成したコードをサーバーに送信するためのAPI
     */
    async apiCodePost(requestParameters: ApiCodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CodeResponse> {
        const response = await this.apiCodePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * IDから評価結果を取得する
     */
    async apiResultGetRaw(requestParameters: ApiResultGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Score>> {
        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/result`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScoreFromJSON(jsonValue));
    }

    /**
     * IDから評価結果を取得する
     */
    async apiResultGet(requestParameters: ApiResultGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Score> {
        const response = await this.apiResultGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
